1
00:00:00,030 --> 00:00:02,490
hey guys in this video we're going to be

2
00:00:02,490 --> 00:00:05,970
covering MongoDB in depth and most of

3
00:00:05,970 --> 00:00:08,340
the content from this video is part of a

4
00:00:08,340 --> 00:00:11,340
10 project course in MongoDB that I did

5
00:00:11,340 --> 00:00:13,650
so if you enjoy it I would suggest

6
00:00:13,650 --> 00:00:16,199
checking that course out too and I'll

7
00:00:16,199 --> 00:00:18,810
leave a link in the description so we're

8
00:00:18,810 --> 00:00:19,920
not going to be building a web

9
00:00:19,920 --> 00:00:22,170
application or anything like that using

10
00:00:22,170 --> 00:00:24,210
other technologies I really want to just

11
00:00:24,210 --> 00:00:27,150
focus on MongoDB and basically the

12
00:00:27,150 --> 00:00:29,939
syntax how to create collections insert

13
00:00:29,939 --> 00:00:32,119
documents update and delete documents

14
00:00:32,119 --> 00:00:35,100
create users and some of the other

15
00:00:35,100 --> 00:00:39,270
fundamentals of MongoDB alright so

16
00:00:39,270 --> 00:00:41,910
is what's called a no SQL database and

17
00:00:41,910 --> 00:00:44,430
there's different types of no SQL

18
00:00:44,430 --> 00:00:46,800
databases so to be more specific it's a

19
00:00:46,800 --> 00:00:48,469
called a document database

20
00:00:48,469 --> 00:00:51,600
alright data or records are stored as

21
00:00:51,600 --> 00:00:55,070
documents and they use JSON like syntax

22
00:00:55,070 --> 00:00:57,390
so if you don't know what jason is it's

23
00:00:57,390 --> 00:01:00,120
JavaScript object notation and I'll get

24
00:01:00,120 --> 00:01:03,390
into the syntax in a minute so notice ql

25
00:01:03,390 --> 00:01:05,280
databases are much different than

26
00:01:05,280 --> 00:01:08,430
relational databases like say mysql or

27
00:01:08,430 --> 00:01:11,369
Postgres with a relational database you

28
00:01:11,369 --> 00:01:13,590
really have to map out everything you

29
00:01:13,590 --> 00:01:15,420
need to figure out the exact schema

30
00:01:15,420 --> 00:01:17,820
including what tables you use what

31
00:01:17,820 --> 00:01:19,979
fields you'll use and even the types of

32
00:01:19,979 --> 00:01:21,689
fields ok whether it's going to be a

33
00:01:21,689 --> 00:01:24,659
string or an integer all that stuff so

34
00:01:24,659 --> 00:01:27,270
with no SQL there's there's not really

35
00:01:27,270 --> 00:01:29,850
any of that I mean you should plan out

36
00:01:29,850 --> 00:01:31,530
the structure of your database and your

37
00:01:31,530 --> 00:01:33,600
collections but you don't have to do any

38
00:01:33,600 --> 00:01:36,150
predefined structuring before you build

39
00:01:36,150 --> 00:01:38,729
your application alright one of the huge

40
00:01:38,729 --> 00:01:41,549
advantages to MongoDB and no SQL

41
00:01:41,549 --> 00:01:44,460
databases in general is scaling ok

42
00:01:44,460 --> 00:01:47,000
they're really easy to scale compared to

43
00:01:47,000 --> 00:01:50,820
SQL or relational databases they're also

44
00:01:50,820 --> 00:01:53,490
much faster in most types of operations

45
00:01:53,490 --> 00:01:57,570
there are some things that would it

46
00:01:57,570 --> 00:01:59,310
would benefit by using relational

47
00:01:59,310 --> 00:02:01,670
databases but when you're dealing with

48
00:02:01,670 --> 00:02:05,969
just a crapload of data then no SQL is

49
00:02:05,969 --> 00:02:08,038
usually the way to go all right as long

50
00:02:08,038 --> 00:02:11,520
as there's not really a ton of

51
00:02:11,520 --> 00:02:13,590
interconnected relationships

52
00:02:13,590 --> 00:02:17,360
all right so enough talking about

53
00:02:17,360 --> 00:02:20,670
methodology let's jump in and get

54
00:02:20,670 --> 00:02:23,220
started so I'm using Windows in the

55
00:02:23,220 --> 00:02:25,020
course I mentioned we do use Linux

56
00:02:25,020 --> 00:02:27,000
Ubuntu quite a bit but for this

57
00:02:27,000 --> 00:02:29,520
particular video we're using Windows so

58
00:02:29,520 --> 00:02:31,590
we're going to go to MongoDB comm and

59
00:02:31,590 --> 00:02:33,180
you want to click the download button

60
00:02:33,180 --> 00:02:37,500
here and that should take us to the

61
00:02:37,500 --> 00:02:40,470
download page and we're going to go

62
00:02:40,470 --> 00:02:43,709
ahead and choose this version here it

63
00:02:43,709 --> 00:02:46,560
says Windows Server 2008 that's fine

64
00:02:46,560 --> 00:02:49,739
64-bit so we're going to go ahead and

65
00:02:49,739 --> 00:02:51,810
download that alright which I already

66
00:02:51,810 --> 00:02:54,569
did so it's 104 megabytes so it might

67
00:02:54,569 --> 00:02:57,269
take a couple minutes but I already have

68
00:02:57,269 --> 00:02:58,470
it downloaded so I'm going to cancel

69
00:02:58,470 --> 00:03:00,780
that and we're going to go ahead and run

70
00:03:00,780 --> 00:03:03,690
that MSI file so I'm going to click Next

71
00:03:03,690 --> 00:03:05,790
and just go through this looks up the

72
00:03:05,790 --> 00:03:08,280
terms now I think I'm going to choose

73
00:03:08,280 --> 00:03:10,080
custom because I want to change the

74
00:03:10,080 --> 00:03:12,420
location ok by default it's going to go

75
00:03:12,420 --> 00:03:14,700
in your Program Files folder and then

76
00:03:14,700 --> 00:03:18,390
 DB server 3.2 I want it much more

77
00:03:18,390 --> 00:03:20,700
simple than that the path so I want to

78
00:03:20,700 --> 00:03:25,530
just go right to my C Drive so in my C

79
00:03:25,530 --> 00:03:26,989
Drive I'm going to create a folder

80
00:03:26,989 --> 00:03:30,450
called Luongo DB and then we're going to

81
00:03:30,450 --> 00:03:33,030
just open that and click OK

82
00:03:33,030 --> 00:03:35,609
ok so much simpler it's just right in

83
00:03:35,609 --> 00:03:38,190
the C Drive ok we'll click Next and then

84
00:03:38,190 --> 00:03:45,750
install and we'll say yes okay so that's

85
00:03:45,750 --> 00:03:48,450
finished we'll click finish and there's

86
00:03:48,450 --> 00:03:50,430
still a couple steps we need to do we

87
00:03:50,430 --> 00:03:53,750
need to open up a command line as

88
00:03:53,750 --> 00:03:59,190
administrator ok and I have that nice

89
00:03:59,190 --> 00:04:02,340
and big so you can see it and also we're

90
00:04:02,340 --> 00:04:04,730
going to go to that folder and C Drive

91
00:04:04,730 --> 00:04:06,930
MongoDB and we're going to create a

92
00:04:06,930 --> 00:04:08,819
couple folders here I'm going to create

93
00:04:08,819 --> 00:04:12,000
one called data and we're going to

94
00:04:12,000 --> 00:04:15,359
create one called log all right and then

95
00:04:15,359 --> 00:04:17,310
inside data we're going to have another

96
00:04:17,310 --> 00:04:19,680
one called DB ok and that's where all

97
00:04:19,680 --> 00:04:21,000
the data will be stored on the

98
00:04:21,000 --> 00:04:23,900
filesystem and now let's go to our

99
00:04:23,900 --> 00:04:26,070
command line here and we're going to

100
00:04:26,070 --> 00:04:27,270
navigate to

101
00:04:27,270 --> 00:04:32,120
the MongoDB folder and then into into

102
00:04:32,120 --> 00:04:38,220
the bin folder all right now in here we

103
00:04:38,220 --> 00:04:41,669
need to run D and we're going to

104
00:04:41,669 --> 00:04:44,580
add a bunch of flags here so the first

105
00:04:44,580 --> 00:04:50,310
one is going to be Directory / dB all

106
00:04:50,310 --> 00:04:53,190
right and then we want to specify DB

107
00:04:53,190 --> 00:04:55,889
path which is going to be the path to

108
00:04:55,889 --> 00:04:58,020
the the folder we just created so C

109
00:04:58,020 --> 00:05:05,479
Drive slash DB slash data slash

110
00:05:05,479 --> 00:05:08,669
and if you didn't install in your C

111
00:05:08,669 --> 00:05:11,069
Drive MongoDB just put whatever location

112
00:05:11,069 --> 00:05:13,199
you used all right and that's why I

113
00:05:13,199 --> 00:05:15,900
wanted to change that data that long

114
00:05:15,900 --> 00:05:18,960
location path alright so after that

115
00:05:18,960 --> 00:05:23,539
we're going to say - - log path and

116
00:05:23,539 --> 00:05:28,199
that's going to be C Drive slash MongoDB

117
00:05:28,199 --> 00:05:31,710
slash log and then I'm going to say

118
00:05:31,710 --> 00:05:34,680
slash dot log ok so that's going

119
00:05:34,680 --> 00:05:37,259
to be the file that all the MongoDB logs

120
00:05:37,259 --> 00:05:39,750
right - and then we just want to specify

121
00:05:39,750 --> 00:05:46,979
- - log append and - - rest and then - -

122
00:05:46,979 --> 00:05:49,349
install ok and that's going to allow us

123
00:05:49,349 --> 00:05:52,139
to run it as a service so let's go ahead

124
00:05:52,139 --> 00:05:56,099
and run that and now we should be able

125
00:05:56,099 --> 00:06:02,539
to run the service with net start

126
00:06:02,539 --> 00:06:05,520
MongoDB okay and now it says it's

127
00:06:05,520 --> 00:06:08,729
starting and it started successfully ok

128
00:06:08,729 --> 00:06:10,770
so we now have MongoDB installed and

129
00:06:10,770 --> 00:06:12,810
it's also running in the background as a

130
00:06:12,810 --> 00:06:16,080
service now we're going to be working in

131
00:06:16,080 --> 00:06:18,240
the shell and we can run that by

132
00:06:18,240 --> 00:06:20,550
simply typing from within the bin

133
00:06:20,550 --> 00:06:21,150
directory

134
00:06:21,150 --> 00:06:23,789
alright so we're now in the shell I'm

135
00:06:23,789 --> 00:06:26,460
just going to do think CLS and that

136
00:06:26,460 --> 00:06:29,819
clears everything out now to show us a

137
00:06:29,819 --> 00:06:33,060
list of databases we can do show DBS and

138
00:06:33,060 --> 00:06:35,729
it shows us that there's one default

139
00:06:35,729 --> 00:06:37,620
database they are called local which

140
00:06:37,620 --> 00:06:39,150
we're not going to touch we want to

141
00:06:39,150 --> 00:06:40,800
create a new database

142
00:06:40,800 --> 00:06:42,870
so to do that we're going to say use and

143
00:06:42,870 --> 00:06:45,120
then whatever we want to call it will

144
00:06:45,120 --> 00:06:48,330
say my customers and you can see that

145
00:06:48,330 --> 00:06:49,860
not only did it create it but it also

146
00:06:49,860 --> 00:06:52,560
switched us to that database and if you

147
00:06:52,560 --> 00:06:54,599
ever want to check what current database

148
00:06:54,599 --> 00:06:57,330
you're in you can just do DB and it'll

149
00:06:57,330 --> 00:07:00,240
tell you I just want to quickly go over

150
00:07:00,240 --> 00:07:03,750
the syntax for a document so I'm going

151
00:07:03,750 --> 00:07:05,669
to open up notepad and a lot of the

152
00:07:05,669 --> 00:07:07,050
queries that I do I'm going to put a

153
00:07:07,050 --> 00:07:09,930
notepad first and then just copy them

154
00:07:09,930 --> 00:07:12,120
and paste them in just for readability

155
00:07:12,120 --> 00:07:14,129
alright now basically when we're working

156
00:07:14,129 --> 00:07:16,860
with a document it's just like a JSON

157
00:07:16,860 --> 00:07:18,870
object or a JavaScript object we have

158
00:07:18,870 --> 00:07:21,889
set of curly braces and then we have a

159
00:07:21,889 --> 00:07:26,190
field with a value okay and then a comma

160
00:07:26,190 --> 00:07:28,889
and you can just keep adding fields so

161
00:07:28,889 --> 00:07:31,889
let's say if we have a customer we may

162
00:07:31,889 --> 00:07:35,719
want them to have a first name

163
00:07:35,719 --> 00:07:38,219
okay strings will have quotes around

164
00:07:38,219 --> 00:07:43,620
them and let's say last name all right

165
00:07:43,620 --> 00:07:46,319
so these are just very simple string

166
00:07:46,319 --> 00:07:50,099
fields alright of string values if you

167
00:07:50,099 --> 00:07:54,050
want we can also have an array as a

168
00:07:54,050 --> 00:07:57,529
value so let's say maybe there's

169
00:07:57,529 --> 00:08:01,979
memberships and we want an array with

170
00:08:01,979 --> 00:08:04,770
all the different memberships that this

171
00:08:04,770 --> 00:08:06,840
user is in that this customer is in so

172
00:08:06,840 --> 00:08:10,080
maybe mem one and M two and so on okay

173
00:08:10,080 --> 00:08:12,300
so we can have arrays we can also have

174
00:08:12,300 --> 00:08:17,789
objects so let's say address and that's

175
00:08:17,789 --> 00:08:21,419
represented with curly braces and you

176
00:08:21,419 --> 00:08:32,549
might have a street and a city and so on

177
00:08:32,549 --> 00:08:36,690
okay you can also have arrays of objects

178
00:08:36,690 --> 00:08:39,929
so maybe we'll have one called phones

179
00:08:39,929 --> 00:08:44,550
and actually is that that's not really a

180
00:08:44,550 --> 00:08:50,430
good example maybe contacts so if we

181
00:08:50,430 --> 00:08:53,149
have an array

182
00:08:53,770 --> 00:08:59,660
and you may have let's say named Brad

183
00:08:59,660 --> 00:09:09,880
whoops and then maybe a relationship

184
00:09:09,880 --> 00:09:11,840
friend and so on

185
00:09:11,840 --> 00:09:13,670
all right you could do a comma here and

186
00:09:13,670 --> 00:09:15,620
then add another one so you have

187
00:09:15,620 --> 00:09:19,250
different types of value now before we

188
00:09:19,250 --> 00:09:21,590
go and we start inserting data I want to

189
00:09:21,590 --> 00:09:23,510
just create a simple user for this

190
00:09:23,510 --> 00:09:27,170
database so if we go to I'm just going

191
00:09:27,170 --> 00:09:30,950
to search for it will say MongoDB create

192
00:09:30,950 --> 00:09:39,890
user ok so DB dot create user will

193
00:09:39,890 --> 00:09:42,170
create a user for that database and this

194
00:09:42,170 --> 00:09:44,480
format here so we're going to say over

195
00:09:44,480 --> 00:09:51,680
here DB dot create user and we'll pass

196
00:09:51,680 --> 00:09:54,920
in some curly braces and let's specify

197
00:09:54,920 --> 00:10:00,920
what is it user user and we'll just say

198
00:10:00,920 --> 00:10:10,940
Brad and then password PWD and roles ok

199
00:10:10,940 --> 00:10:15,620
roles I believe is an array okay can be

200
00:10:15,620 --> 00:10:17,450
an array of objects but I think we can

201
00:10:17,450 --> 00:10:21,020
make it more simple yeah I just want

202
00:10:21,020 --> 00:10:22,880
this right here read/write so that we

203
00:10:22,880 --> 00:10:24,800
can read and write to the database and

204
00:10:24,800 --> 00:10:27,320
also as an admin so I'm just going to

205
00:10:27,320 --> 00:10:31,270
grab that and it'll paste that in and

206
00:10:31,270 --> 00:10:35,270
then let's copy that paste that in and

207
00:10:35,270 --> 00:10:37,310
run it and now you'll see it says

208
00:10:37,310 --> 00:10:41,090
successfully added user ok so now that

209
00:10:41,090 --> 00:10:44,030
we have a user let's start to add some

210
00:10:44,030 --> 00:10:48,200
data so to do that we use insert so we

211
00:10:48,200 --> 00:10:51,020
say DB dot and then whatever like the Co

212
00:10:51,020 --> 00:10:53,360
we didn't create a collection did we all

213
00:10:53,360 --> 00:10:55,400
right so let's back up a little bit

214
00:10:55,400 --> 00:10:58,340
collections are very similar to tables

215
00:10:58,340 --> 00:11:00,710
in a relational database basically

216
00:11:00,710 --> 00:11:02,510
they're just they hold documents or

217
00:11:02,510 --> 00:11:04,850
records so to create a collection we're

218
00:11:04,850 --> 00:11:07,059
going to say DB

219
00:11:07,059 --> 00:11:10,999
create collection and pass in the name

220
00:11:10,999 --> 00:11:12,639
of the collection which will say

221
00:11:12,639 --> 00:11:16,129
customers all right and then if we want

222
00:11:16,129 --> 00:11:17,479
to see all the collections in this

223
00:11:17,479 --> 00:11:19,609
database we can simply say show

224
00:11:19,609 --> 00:11:22,429
collections all right now if we want to

225
00:11:22,429 --> 00:11:24,739
insert a document into that collection

226
00:11:24,739 --> 00:11:31,220
we say DB dot customers dot insert all

227
00:11:31,220 --> 00:11:32,979
right and then that's going to take in

228
00:11:32,979 --> 00:11:36,350
some curly braces and let's say first

229
00:11:36,350 --> 00:11:49,369
name John last name Doh okay so if we go

230
00:11:49,369 --> 00:11:52,279
ahead and run that we get an inserted

231
00:11:52,279 --> 00:11:56,209
one okay so it inserted one document now

232
00:11:56,209 --> 00:11:59,359
if we want to see the documents in a

233
00:11:59,359 --> 00:12:03,129
collection we can say DB dot customers

234
00:12:03,129 --> 00:12:08,389
dot find and you can see it gives us

235
00:12:08,389 --> 00:12:10,669
that list of documents which we only

236
00:12:10,669 --> 00:12:12,829
have one has a first name and last name

237
00:12:12,829 --> 00:12:16,399
but it also has this underscore ID field

238
00:12:16,399 --> 00:12:19,369
which is set to be an object ID all

239
00:12:19,369 --> 00:12:21,230
right and this is used as a unique value

240
00:12:21,230 --> 00:12:25,009
to find documents and do some other

241
00:12:25,009 --> 00:12:26,509
stuff but notice that it was

242
00:12:26,509 --> 00:12:28,910
automatically created okay so we don't

243
00:12:28,910 --> 00:12:31,069
have to worry about creating an ID field

244
00:12:31,069 --> 00:12:33,829
setting it to auto increment saying

245
00:12:33,829 --> 00:12:35,749
setting it as a primary key these are

246
00:12:35,749 --> 00:12:37,579
all things that you have to do in a

247
00:12:37,579 --> 00:12:40,819
relational database all right so let's

248
00:12:40,819 --> 00:12:44,629
go ahead and add a couple more now if we

249
00:12:44,629 --> 00:12:48,139
want to add multiple documents at once

250
00:12:48,139 --> 00:12:50,629
we can just make an array so put square

251
00:12:50,629 --> 00:12:53,089
brackets oops

252
00:12:53,089 --> 00:12:55,669
square brackets around it like that and

253
00:12:55,669 --> 00:13:02,860
let's change this name change them to

254
00:13:02,860 --> 00:13:07,340
Stephen Smith and then let's put a comma

255
00:13:07,340 --> 00:13:10,840
here and then another user or customer

256
00:13:10,840 --> 00:13:18,590
with the first name will say Joan last

257
00:13:18,590 --> 00:13:28,580
name will say Johnson okay now with a

258
00:13:28,580 --> 00:13:30,590
relational database we would have to

259
00:13:30,590 --> 00:13:34,580
specify that the customers table would

260
00:13:34,580 --> 00:13:36,380
have to have a first name and a last

261
00:13:36,380 --> 00:13:38,030
name and that's it they couldn't just

262
00:13:38,030 --> 00:13:41,090
on-the-fly add another field and that's

263
00:13:41,090 --> 00:13:42,950
what's great about no askew ellos we can

264
00:13:42,950 --> 00:13:46,190
do that so for this George own Johnson

265
00:13:46,190 --> 00:13:50,780
let's say we want to add a gender and

266
00:13:50,780 --> 00:13:55,630
we'll set that as females

267
00:13:55,630 --> 00:13:58,370
okay so set that is female and then

268
00:13:58,370 --> 00:14:01,670
let's go ahead and enter and now if we

269
00:14:01,670 --> 00:14:05,750
do a find you'll see that Joan has a

270
00:14:05,750 --> 00:14:08,750
gender field okay even though we didn't

271
00:14:08,750 --> 00:14:11,240
specify that for John and Steven it's

272
00:14:11,240 --> 00:14:13,580
fine okay you can have whatever fields

273
00:14:13,580 --> 00:14:16,370
you want on whatever documents you want

274
00:14:16,370 --> 00:14:19,040
all right now we only have a couple

275
00:14:19,040 --> 00:14:21,050
fields so this is this looks nice and

276
00:14:21,050 --> 00:14:23,150
clean but if you have a ton of fields

277
00:14:23,150 --> 00:14:26,660
here it can get kind of messy so we can

278
00:14:26,660 --> 00:14:30,470
add on to find we can say dot pretty

279
00:14:30,470 --> 00:14:32,480
just kind of a helper function and

280
00:14:32,480 --> 00:14:34,520
you'll see that it makes it nice and

281
00:14:34,520 --> 00:14:38,240
neat for us all right so let's look at

282
00:14:38,240 --> 00:14:40,700
updating a field all right so let's say

283
00:14:40,700 --> 00:14:42,530
that for John Doe we want to add a

284
00:14:42,530 --> 00:14:44,990
gender to him as well so what we would

285
00:14:44,990 --> 00:14:52,840
do is DB dot customers dot update and

286
00:14:52,840 --> 00:14:56,450
first parameter is going to be a match

287
00:14:56,450 --> 00:15:00,530
so we want to match name or actually

288
00:15:00,530 --> 00:15:04,210
let's do first name

289
00:15:04,900 --> 00:15:08,410
- John okay so it's going to match

290
00:15:08,410 --> 00:15:10,240
anyone that has the first name of John

291
00:15:10,240 --> 00:15:12,400
now if you're building a production

292
00:15:12,400 --> 00:15:14,110
application you probably don't want to

293
00:15:14,110 --> 00:15:15,730
use something like first name because

294
00:15:15,730 --> 00:15:18,370
other people can also have that name so

295
00:15:18,370 --> 00:15:20,350
it's going to update all of them you

296
00:15:20,350 --> 00:15:21,820
probably want to use either the object

297
00:15:21,820 --> 00:15:24,640
ID or some other unique field but just

298
00:15:24,640 --> 00:15:26,320
for simplicity we're going to use first

299
00:15:26,320 --> 00:15:29,140
name so then the next parameter is going

300
00:15:29,140 --> 00:15:31,810
to be what we want to replace it with

301
00:15:31,810 --> 00:15:37,890
okay so we'll say first name John

302
00:15:38,640 --> 00:15:47,950
lastname DOE and gender male right so

303
00:15:47,950 --> 00:15:49,330
we'll go ahead and run that it says it

304
00:15:49,330 --> 00:15:52,390
matched one modified one so if we look

305
00:15:52,390 --> 00:15:55,210
at the find now you can see that John

306
00:15:55,210 --> 00:15:58,540
Doe has a gender of male now notice when

307
00:15:58,540 --> 00:16:01,690
we did the update we had to also specify

308
00:16:01,690 --> 00:16:04,029
first and last name again even though it

309
00:16:04,029 --> 00:16:06,220
was already there if we didn't do that

310
00:16:06,220 --> 00:16:09,100
and we just said gender male it would it

311
00:16:09,100 --> 00:16:11,860
would basically replace the entire thing

312
00:16:11,860 --> 00:16:14,560
with just that gender male now there is

313
00:16:14,560 --> 00:16:15,970
a way around that and that's by using

314
00:16:15,970 --> 00:16:20,130
the set operator all right so let's say

315
00:16:20,130 --> 00:16:22,510
Steven Smith we want to add a gender to

316
00:16:22,510 --> 00:16:26,980
him all right so we can say update and

317
00:16:26,980 --> 00:16:32,970
let's say first name equal to Steven and

318
00:16:32,970 --> 00:16:36,370
then for the second parameter I'm just

319
00:16:36,370 --> 00:16:39,070
going to get rid of this okay we do want

320
00:16:39,070 --> 00:16:41,260
to keep the curly braces and inside

321
00:16:41,260 --> 00:16:42,790
there we're going to say dollar signs

322
00:16:42,790 --> 00:16:44,860
set all right and then we're going to

323
00:16:44,860 --> 00:16:46,720
set that to another set of curly braces

324
00:16:46,720 --> 00:16:52,450
and we'll say gender male so using set

325
00:16:52,450 --> 00:16:54,459
it's going to keep whatever is there

326
00:16:54,459 --> 00:16:57,190
previously and then just add this on so

327
00:16:57,190 --> 00:16:59,200
if we go ahead and run that and then we

328
00:16:59,200 --> 00:17:01,600
do a find you'll see that Steven Smith

329
00:17:01,600 --> 00:17:03,610
still has his first name and last name

330
00:17:03,610 --> 00:17:08,319
and just added the gender now we also

331
00:17:08,319 --> 00:17:11,050
have an operator called Inc which can

332
00:17:11,050 --> 00:17:14,709
increment numeric values for us so first

333
00:17:14,709 --> 00:17:17,800
thing I want to do is just add - Steven

334
00:17:17,800 --> 00:17:25,030
I'm going to add an age and let's say 45

335
00:17:25,030 --> 00:17:26,260
actually we want to get rid of the

336
00:17:26,260 --> 00:17:30,550
quotes 45 all right so now if we do a

337
00:17:30,550 --> 00:17:33,880
find I can see that he has an age of 45

338
00:17:33,880 --> 00:17:35,710
now if we want to increment that we can

339
00:17:35,710 --> 00:17:45,610
say DB dot customers dot update and we

340
00:17:45,610 --> 00:17:52,330
want to match first name Steven and then

341
00:17:52,330 --> 00:17:55,240
here we want to put our curly braces and

342
00:17:55,240 --> 00:17:57,700
then we're going to specify dollar sign

343
00:17:57,700 --> 00:18:02,890
Inc go like that and then we want to age

344
00:18:02,890 --> 00:18:05,650
and then the number we want to increment

345
00:18:05,650 --> 00:18:09,160
so let's increment 5 okay you just aged

346
00:18:09,160 --> 00:18:14,260
five years let's see what oh I didn't

347
00:18:14,260 --> 00:18:22,900
put curly braces around this all right

348
00:18:22,900 --> 00:18:26,620
so now if we do fine you see that Steven

349
00:18:26,620 --> 00:18:30,120
is now 50 okay it added five incremented

350
00:18:30,120 --> 00:18:33,040
now we also have an operator called

351
00:18:33,040 --> 00:18:36,730
unset if we want to remove a field so

352
00:18:36,730 --> 00:18:39,460
let's say DB

353
00:18:39,460 --> 00:18:46,840
dot customers dot update and we want to

354
00:18:46,840 --> 00:18:55,929
specify first name Steven and then let's

355
00:18:55,929 --> 00:18:59,620
put for our next parameter we're going

356
00:18:59,620 --> 00:19:06,400
to say dollar sign unset and we'll say

357
00:19:06,400 --> 00:19:10,750
unset I think we can do unset age let's

358
00:19:10,750 --> 00:19:11,800
try that nope

359
00:19:11,800 --> 00:19:14,920
age is not defined all right so we need

360
00:19:14,920 --> 00:19:19,650
to do unset and then curly braces and

361
00:19:19,650 --> 00:19:22,190
then age

362
00:19:22,190 --> 00:19:25,130
I think it's like that yeah okay so age

363
00:19:25,130 --> 00:19:28,370
one and then let's do a find and now

364
00:19:28,370 --> 00:19:32,030
Steven doesn't have age anymore now

365
00:19:32,030 --> 00:19:33,500
let's see what happens if we try to

366
00:19:33,500 --> 00:19:35,540
update something that isn't a match

367
00:19:35,540 --> 00:19:36,740
something that isn't there

368
00:19:36,740 --> 00:19:43,840
alright so let's say DB customers update

369
00:19:43,840 --> 00:19:47,390
and put in some curly braces and we'll

370
00:19:47,390 --> 00:19:55,370
say first name first name Mary and then

371
00:19:55,370 --> 00:20:01,660
we want to update we'll say first name

372
00:20:01,960 --> 00:20:11,720
Mary and last name Samson all right so

373
00:20:11,720 --> 00:20:14,300
let's go ahead and run that and you'll

374
00:20:14,300 --> 00:20:17,330
see that the result is zero all across

375
00:20:17,330 --> 00:20:20,780
so if we do a fine now it's just it's

376
00:20:20,780 --> 00:20:23,780
the same but if we want to say if this

377
00:20:23,780 --> 00:20:27,950
isn't found then insert it we can add an

378
00:20:27,950 --> 00:20:30,680
option called up cert so let's go back

379
00:20:30,680 --> 00:20:33,170
to that query and then we're going to

380
00:20:33,170 --> 00:20:36,710
set a third parameter here which is some

381
00:20:36,710 --> 00:20:39,490
options and we're going to say up cert

382
00:20:39,490 --> 00:20:43,370
set that to true and then we'll run that

383
00:20:43,370 --> 00:20:45,980
now you can see that we get one inserted

384
00:20:45,980 --> 00:20:48,770
or up sorted rather and it also includes

385
00:20:48,770 --> 00:20:51,520
an object ID so now if we do our find

386
00:20:51,520 --> 00:20:54,860
you can see that mary has now been added

387
00:20:54,860 --> 00:20:59,090
and an object IDs been created now we

388
00:20:59,090 --> 00:21:01,700
also have an operator called rename that

389
00:21:01,700 --> 00:21:04,250
we can use with update so if we say DV

390
00:21:04,250 --> 00:21:13,250
dot customers Tod update DV customers

391
00:21:13,250 --> 00:21:18,760
update and let's say where first-name is

392
00:21:18,760 --> 00:21:27,950
equal to Steven and then for the second

393
00:21:27,950 --> 00:21:31,600
parameter here we're going to say

394
00:21:31,640 --> 00:21:35,750
let's do curly braces and then rename

395
00:21:35,750 --> 00:21:39,570
and we should be able to rename let's

396
00:21:39,570 --> 00:21:44,159
say gender we'll rename that to sex

397
00:21:44,159 --> 00:21:53,340
I think that's the syntax rename oh not

398
00:21:53,340 --> 00:21:55,409
wait we got to put curly braces around

399
00:21:55,409 --> 00:22:03,200
this okay alright so now if we do a find

400
00:22:03,200 --> 00:22:05,700
now you can see that with Steve Smith

401
00:22:05,700 --> 00:22:09,360
gender has changed to sex alright so

402
00:22:09,360 --> 00:22:11,250
those are some of the operators we can

403
00:22:11,250 --> 00:22:14,490
use with update now to remove documents

404
00:22:14,490 --> 00:22:18,480
is very easy we can just say DB dot

405
00:22:18,480 --> 00:22:23,669
customers dot remove and then let's

406
00:22:23,669 --> 00:22:29,490
specify where first-name is equal to

407
00:22:29,490 --> 00:22:33,270
Steven okay you can see we get n removed

408
00:22:33,270 --> 00:22:36,210
one and now if we do a find Stephens

409
00:22:36,210 --> 00:22:41,669
gone now by default that query we just

410
00:22:41,669 --> 00:22:44,480
ran the remove it would delete all

411
00:22:44,480 --> 00:22:46,890
customers with the first name of Stephen

412
00:22:46,890 --> 00:22:50,669
but you could add a parameter here you

413
00:22:50,669 --> 00:22:53,669
could set inside your options there's

414
00:22:53,669 --> 00:22:57,149
one called just one and you could set

415
00:22:57,149 --> 00:23:00,210
that to true alright I believe it's true

416
00:23:00,210 --> 00:23:02,940
true or one but you can set that and

417
00:23:02,940 --> 00:23:04,409
then it's only going to delete the first

418
00:23:04,409 --> 00:23:06,059
Stephen it finds it's not going to

419
00:23:06,059 --> 00:23:08,429
delete all of them alright so just kind

420
00:23:08,429 --> 00:23:11,610
of a safety option alright so I want to

421
00:23:11,610 --> 00:23:14,370
show you a few other things but I want

422
00:23:14,370 --> 00:23:16,950
some more data to work with so I'm going

423
00:23:16,950 --> 00:23:19,980
to in notepad I'm going to just paste in

424
00:23:19,980 --> 00:23:25,380
a query to add some more data alright so

425
00:23:25,380 --> 00:23:27,600
we basically just have an insert here

426
00:23:27,600 --> 00:23:30,090
with some fields for a customer's first

427
00:23:30,090 --> 00:23:33,330
name last name gender age address which

428
00:23:33,330 --> 00:23:36,390
is an object memberships which is an

429
00:23:36,390 --> 00:23:39,299
array and then balance okay so we have

430
00:23:39,299 --> 00:23:41,880
what is it I think five four or five of

431
00:23:41,880 --> 00:23:45,390
them so I'm going to copy this

432
00:23:45,390 --> 00:23:48,039
and we're going to go over here and

433
00:23:48,039 --> 00:23:51,340
paste that in and run it you can see

434
00:23:51,340 --> 00:23:54,220
it's inserted five so if we go and we do

435
00:23:54,220 --> 00:23:57,940
find you can see the different customers

436
00:23:57,940 --> 00:24:02,440
that were added all right now I think up

437
00:24:02,440 --> 00:24:04,570
to this point we've just done find with

438
00:24:04,570 --> 00:24:08,250
no parameters so what I want to do is DB

439
00:24:08,250 --> 00:24:13,080
customers dot find and we can pass in a

440
00:24:13,080 --> 00:24:17,039
query here so let's say we want to find

441
00:24:17,039 --> 00:24:18,220
Sharon

442
00:24:18,220 --> 00:24:26,049
so we could say first name Sharon okay

443
00:24:26,049 --> 00:24:28,299
and that's going to give us all Sharon's

444
00:24:28,299 --> 00:24:31,419
information now let's say we wanted to

445
00:24:31,419 --> 00:24:35,020
find Sharon in Troy all right so what we

446
00:24:35,020 --> 00:24:37,570
could do is use the we could use the or

447
00:24:37,570 --> 00:24:42,760
operator so let's say DB dot customers

448
00:24:42,760 --> 00:24:49,690
dot find and let's pass in our curly

449
00:24:49,690 --> 00:24:50,980
braces and then we're going to say

450
00:24:50,980 --> 00:24:54,190
dollar sign or set that and then put

451
00:24:54,190 --> 00:24:56,770
some square brackets for an array and

452
00:24:56,770 --> 00:25:05,350
we'll say first name Sharon put a comma

453
00:25:05,350 --> 00:25:10,440
here and I'll stay first name

454
00:25:10,799 --> 00:25:14,169
Troy okay if we run that you can see

455
00:25:14,169 --> 00:25:16,179
that it gives us back Troy's information

456
00:25:16,179 --> 00:25:19,500
and Sharon's okay now we can do a simple

457
00:25:19,500 --> 00:25:24,580
find for a different field that is going

458
00:25:24,580 --> 00:25:27,159
to match multiple results so for

459
00:25:27,159 --> 00:25:31,360
instance gender if we say find gender

460
00:25:31,360 --> 00:25:36,159
and change that to male if we run that

461
00:25:36,159 --> 00:25:37,900
it's going to give us everybody that has

462
00:25:37,900 --> 00:25:42,909
the gender of male now we can also use

463
00:25:42,909 --> 00:25:45,970
greater than or less than operators so

464
00:25:45,970 --> 00:25:47,980
let's say we want to find everyone that

465
00:25:47,980 --> 00:25:52,409
is under the age of 40 so we'll say DB

466
00:25:52,409 --> 00:25:54,760
dot

467
00:25:54,760 --> 00:26:00,920
customers dot find and in here we're

468
00:26:00,920 --> 00:26:09,890
going to pass in age and in here we're

469
00:26:09,890 --> 00:26:11,120
going to set I'm going to open up some

470
00:26:11,120 --> 00:26:14,380
curly braces and we'll say dollar sign

471
00:26:14,380 --> 00:26:18,740
GT and we'll set that to actually do we

472
00:26:18,740 --> 00:26:22,370
want to do less than I'll do LT set that

473
00:26:22,370 --> 00:26:26,420
to forty okay and that's given us back

474
00:26:26,420 --> 00:26:28,550
actually let's add pretty to the end

475
00:26:28,550 --> 00:26:32,900
here okay so that gives us back

476
00:26:32,900 --> 00:26:35,180
everybody that is under forty you see

477
00:26:35,180 --> 00:26:37,700
Troy's thirty three twenty three and

478
00:26:37,700 --> 00:26:40,490
thirty five all right and obviously you

479
00:26:40,490 --> 00:26:43,250
can do GT for greater than all right now

480
00:26:43,250 --> 00:26:46,040
there's also LTE which is less than or

481
00:26:46,040 --> 00:26:48,860
equal to and GTE which is greater than

482
00:26:48,860 --> 00:26:52,430
or equal to now let's say we want to

483
00:26:52,430 --> 00:26:55,280
find everyone that lives in the city of

484
00:26:55,280 --> 00:26:59,390
Boston so you can see that we have for

485
00:26:59,390 --> 00:27:01,850
our address which is an object which has

486
00:27:01,850 --> 00:27:04,420
street city and state so what we can do

487
00:27:04,420 --> 00:27:10,640
is we'll say DB dot customers dot find

488
00:27:10,640 --> 00:27:16,850
and here we're going to say we're going

489
00:27:16,850 --> 00:27:21,500
to use quotes here and say address dot

490
00:27:21,500 --> 00:27:27,830
city and then here we'll say Boston okay

491
00:27:27,830 --> 00:27:29,780
we run that and it gives us two people

492
00:27:29,780 --> 00:27:34,190
that have their city as Boston okay when

493
00:27:34,190 --> 00:27:36,830
we're dealing with objects like this we

494
00:27:36,830 --> 00:27:38,840
have to wrap it in quotes you'll see if

495
00:27:38,840 --> 00:27:43,910
I go and take these quotes off it gives

496
00:27:43,910 --> 00:27:47,000
us an error and I should mention that

497
00:27:47,000 --> 00:27:49,490
there are some clients and programs that

498
00:27:49,490 --> 00:27:53,660
will require you to use quotes in the

499
00:27:53,660 --> 00:27:55,820
key as well so just remember that if

500
00:27:55,820 --> 00:27:57,110
you're having issues and some other

501
00:27:57,110 --> 00:28:00,020
client just try that and see if that

502
00:28:00,020 --> 00:28:01,360
helps

503
00:28:01,360 --> 00:28:03,650
alright now if we want to query the

504
00:28:03,650 --> 00:28:05,960
memberships okay remember memberships is

505
00:28:05,960 --> 00:28:07,370
an array

506
00:28:07,370 --> 00:28:09,870
then that's pretty easy all we have to

507
00:28:09,870 --> 00:28:14,519
do is customers dot find and let's say

508
00:28:14,519 --> 00:28:18,029
memberships and then just the name of it

509
00:28:18,029 --> 00:28:20,760
so let's say mem one okay so that's

510
00:28:20,760 --> 00:28:23,010
going to give us everyone that has mem

511
00:28:23,010 --> 00:28:26,720
one inside their memberships array

512
00:28:26,720 --> 00:28:28,860
alright now next thing I want to talk

513
00:28:28,860 --> 00:28:31,740
about is sorting okay so let's do a find

514
00:28:31,740 --> 00:28:33,330
we'll say actually I'm going to clear

515
00:28:33,330 --> 00:28:39,860
this out and we'll do DB dot customers

516
00:28:39,860 --> 00:28:44,159
dot find and then what we can do is we

517
00:28:44,159 --> 00:28:45,299
can add on to this

518
00:28:45,299 --> 00:28:48,990
we'll say dot sort okay and then that's

519
00:28:48,990 --> 00:28:51,630
going to take in whatever field we want

520
00:28:51,630 --> 00:28:58,350
to sort by so let's say we'll do last

521
00:28:58,350 --> 00:28:58,980
name

522
00:28:58,980 --> 00:29:06,690
so we could say flats name one okay so

523
00:29:06,690 --> 00:29:08,880
if I set it to one that means that it's

524
00:29:08,880 --> 00:29:11,370
going to be in ascending order so if we

525
00:29:11,370 --> 00:29:12,710
look at the last name we have Doe

526
00:29:12,710 --> 00:29:16,950
Jenkins Johnson Sampson Wilkins okay if

527
00:29:16,950 --> 00:29:18,570
we want a descending then we could just

528
00:29:18,570 --> 00:29:20,880
set it to negative one and then you can

529
00:29:20,880 --> 00:29:29,880
see whoops I want to do dot pretty okay

530
00:29:29,880 --> 00:29:32,130
now you can see it's going in the

531
00:29:32,130 --> 00:29:35,279
opposite direction okay we have Wilkins

532
00:29:35,279 --> 00:29:37,350
at the beginning all right so that's

533
00:29:37,350 --> 00:29:42,210
sorting we can also count documents so

534
00:29:42,210 --> 00:29:48,559
if we want to do DB customers dot find

535
00:29:48,559 --> 00:29:52,559
count and run that you can see that it

536
00:29:52,559 --> 00:29:55,049
gives us eight okay we can also put a

537
00:29:55,049 --> 00:29:58,610
query in here if we wanted to if we say

538
00:29:58,610 --> 00:30:04,080
gender male and it gives us four okay

539
00:30:04,080 --> 00:30:05,460
because there's four people that are

540
00:30:05,460 --> 00:30:09,870
males we can also limit so if we want to

541
00:30:09,870 --> 00:30:15,000
find we'll find everybody but we're

542
00:30:15,000 --> 00:30:18,020
going to set a limit

543
00:30:19,799 --> 00:30:23,980
I'll set limit to four and you can see

544
00:30:23,980 --> 00:30:28,120
that it gives us the first four and of

545
00:30:28,120 --> 00:30:29,799
course you can combine these

546
00:30:29,799 --> 00:30:36,610
so we could say limit for dot sort and

547
00:30:36,610 --> 00:30:44,980
we'll sort by city last name one and

548
00:30:44,980 --> 00:30:49,240
there we go another cool thing we can do

549
00:30:49,240 --> 00:30:51,850
is we can iterate through stuff using

550
00:30:51,850 --> 00:30:56,470
for each alright so we'll do DB dot

551
00:30:56,470 --> 00:31:00,730
customers dot find and then we want to

552
00:31:00,730 --> 00:31:06,340
say dot for each and then in here we

553
00:31:06,340 --> 00:31:11,309
have function we want to pass it a

554
00:31:11,309 --> 00:31:13,750
variable which can be anything I'm just

555
00:31:13,750 --> 00:31:16,270
going to say doc and then let's say we

556
00:31:16,270 --> 00:31:19,210
want to print it is a print function we

557
00:31:19,210 --> 00:31:22,799
can use and we'll print the string

558
00:31:22,799 --> 00:31:27,580
customer name and then we can

559
00:31:27,580 --> 00:31:29,260
concatenate onto that with a plus sign

560
00:31:29,260 --> 00:31:31,840
okay just like regular JavaScript and

561
00:31:31,840 --> 00:31:36,490
we'll say doc dot and then whatever

562
00:31:36,490 --> 00:31:40,690
field first-name and now we get we're

563
00:31:40,690 --> 00:31:42,429
printing out customer name and then

564
00:31:42,429 --> 00:31:45,669
whatever the first name is alright so

565
00:31:45,669 --> 00:31:47,470
we're going to go ahead and stop here

566
00:31:47,470 --> 00:31:49,720
now if you enjoyed this I would suggest

567
00:31:49,720 --> 00:31:52,809
checking out the ten project MongoDB

568
00:31:52,809 --> 00:31:55,720
course there are a couple projects like

569
00:31:55,720 --> 00:31:57,070
this where we're just dealing with the

570
00:31:57,070 --> 00:31:59,020
database in the shell but there's also

571
00:31:59,020 --> 00:32:00,429
projects where we're building web

572
00:32:00,429 --> 00:32:03,309
applications implementing different

573
00:32:03,309 --> 00:32:07,090
technologies like angular and nodejs so

574
00:32:07,090 --> 00:32:09,460
I would suggest that and thanks for

575
00:32:09,460 --> 00:32:13,110
watching and I'll see you next time

